/**
 * This class is generated by jOOQ
 */
package com.parallax.server.common.cloudsession.db.generated.tables;


import com.parallax.server.common.cloudsession.db.generated.Cloudsession;
import com.parallax.server.common.cloudsession.db.generated.Keys;
import com.parallax.server.common.cloudsession.db.generated.tables.records.AuthenticationtokenchallengeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authenticationtokenchallenge extends TableImpl<AuthenticationtokenchallengeRecord> {

	private static final long serialVersionUID = -1315524681;

	/**
	 * The reference instance of <code>cloudsession.authenticationtokenchallenge</code>
	 */
	public static final Authenticationtokenchallenge AUTHENTICATIONTOKENCHALLENGE = new Authenticationtokenchallenge();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AuthenticationtokenchallengeRecord> getRecordType() {
		return AuthenticationtokenchallengeRecord.class;
	}

	/**
	 * The column <code>cloudsession.authenticationtokenchallenge.id</code>.
	 */
	public final TableField<AuthenticationtokenchallengeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>cloudsession.authenticationtokenchallenge.id_authenticationtoken</code>.
	 */
	public final TableField<AuthenticationtokenchallengeRecord, Long> ID_AUTHENTICATIONTOKEN = createField("id_authenticationtoken", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>cloudsession.authenticationtokenchallenge.challenge</code>.
	 */
	public final TableField<AuthenticationtokenchallengeRecord, String> CHALLENGE = createField("challenge", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>cloudsession.authenticationtokenchallenge.hash</code>.
	 */
	public final TableField<AuthenticationtokenchallengeRecord, String> HASH = createField("hash", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>cloudsession.authenticationtokenchallenge.validity</code>.
	 */
	public final TableField<AuthenticationtokenchallengeRecord, Timestamp> VALIDITY = createField("validity", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>cloudsession.authenticationtokenchallenge</code> table reference
	 */
	public Authenticationtokenchallenge() {
		this("authenticationtokenchallenge", null);
	}

	/**
	 * Create an aliased <code>cloudsession.authenticationtokenchallenge</code> table reference
	 */
	public Authenticationtokenchallenge(String alias) {
		this(alias, AUTHENTICATIONTOKENCHALLENGE);
	}

	private Authenticationtokenchallenge(String alias, Table<AuthenticationtokenchallengeRecord> aliased) {
		this(alias, aliased, null);
	}

	private Authenticationtokenchallenge(String alias, Table<AuthenticationtokenchallengeRecord> aliased, Field<?>[] parameters) {
		super(alias, Cloudsession.CLOUDSESSION, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AuthenticationtokenchallengeRecord, Long> getIdentity() {
		return Keys.IDENTITY_AUTHENTICATIONTOKENCHALLENGE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AuthenticationtokenchallengeRecord> getPrimaryKey() {
		return Keys.KEY_AUTHENTICATIONTOKENCHALLENGE_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AuthenticationtokenchallengeRecord>> getKeys() {
		return Arrays.<UniqueKey<AuthenticationtokenchallengeRecord>>asList(Keys.KEY_AUTHENTICATIONTOKENCHALLENGE_PRIMARY, Keys.KEY_AUTHENTICATIONTOKENCHALLENGE_CHALLENGE_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AuthenticationtokenchallengeRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AuthenticationtokenchallengeRecord, ?>>asList(Keys.CHALLENGES_AUTHENTICATIONTOKEN);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Authenticationtokenchallenge as(String alias) {
		return new Authenticationtokenchallenge(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Authenticationtokenchallenge rename(String name) {
		return new Authenticationtokenchallenge(name, null);
	}
}
