/**
 * This class is generated by jOOQ
 */
package com.parallax.server.common.cloudsession.db.generated;


import com.parallax.server.common.cloudsession.db.generated.tables.Bucket;
import com.parallax.server.common.cloudsession.db.generated.tables.Confirmtoken;
import com.parallax.server.common.cloudsession.db.generated.tables.Resettoken;
import com.parallax.server.common.cloudsession.db.generated.tables.User;
import com.parallax.server.common.cloudsession.db.generated.tables.records.BucketRecord;
import com.parallax.server.common.cloudsession.db.generated.tables.records.ConfirmtokenRecord;
import com.parallax.server.common.cloudsession.db.generated.tables.records.ResettokenRecord;
import com.parallax.server.common.cloudsession.db.generated.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>cloudsession</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<BucketRecord, Long> IDENTITY_BUCKET = Identities0.IDENTITY_BUCKET;
	public static final Identity<ConfirmtokenRecord, Long> IDENTITY_CONFIRMTOKEN = Identities0.IDENTITY_CONFIRMTOKEN;
	public static final Identity<ResettokenRecord, Long> IDENTITY_RESETTOKEN = Identities0.IDENTITY_RESETTOKEN;
	public static final Identity<UserRecord, Long> IDENTITY_USER = Identities0.IDENTITY_USER;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<BucketRecord> KEY_BUCKET_PRIMARY = UniqueKeys0.KEY_BUCKET_PRIMARY;
	public static final UniqueKey<BucketRecord> KEY_BUCKET_USER_TYPE_UNIQUE = UniqueKeys0.KEY_BUCKET_USER_TYPE_UNIQUE;
	public static final UniqueKey<ConfirmtokenRecord> KEY_CONFIRMTOKEN_PRIMARY = UniqueKeys0.KEY_CONFIRMTOKEN_PRIMARY;
	public static final UniqueKey<ConfirmtokenRecord> KEY_CONFIRMTOKEN_ID_USER_UNIQUE = UniqueKeys0.KEY_CONFIRMTOKEN_ID_USER_UNIQUE;
	public static final UniqueKey<ResettokenRecord> KEY_RESETTOKEN_PRIMARY = UniqueKeys0.KEY_RESETTOKEN_PRIMARY;
	public static final UniqueKey<ResettokenRecord> KEY_RESETTOKEN_ID_USER_UNIQUE = UniqueKeys0.KEY_RESETTOKEN_ID_USER_UNIQUE;
	public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
	public static final UniqueKey<UserRecord> KEY_USER_EMAIL_UNIQUE = UniqueKeys0.KEY_USER_EMAIL_UNIQUE;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<BucketRecord, UserRecord> BUCKET_USER = ForeignKeys0.BUCKET_USER;
	public static final ForeignKey<ConfirmtokenRecord, UserRecord> RESETTOKEN_USER = ForeignKeys0.RESETTOKEN_USER;
	public static final ForeignKey<ResettokenRecord, UserRecord> CONFIRMTOKEN_USER = ForeignKeys0.CONFIRMTOKEN_USER;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<BucketRecord, Long> IDENTITY_BUCKET = createIdentity(Bucket.BUCKET, Bucket.BUCKET.ID);
		public static Identity<ConfirmtokenRecord, Long> IDENTITY_CONFIRMTOKEN = createIdentity(Confirmtoken.CONFIRMTOKEN, Confirmtoken.CONFIRMTOKEN.ID);
		public static Identity<ResettokenRecord, Long> IDENTITY_RESETTOKEN = createIdentity(Resettoken.RESETTOKEN, Resettoken.RESETTOKEN.ID);
		public static Identity<UserRecord, Long> IDENTITY_USER = createIdentity(User.USER, User.USER.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<BucketRecord> KEY_BUCKET_PRIMARY = createUniqueKey(Bucket.BUCKET, Bucket.BUCKET.ID);
		public static final UniqueKey<BucketRecord> KEY_BUCKET_USER_TYPE_UNIQUE = createUniqueKey(Bucket.BUCKET, Bucket.BUCKET.ID_USER, Bucket.BUCKET.TYPE);
		public static final UniqueKey<ConfirmtokenRecord> KEY_CONFIRMTOKEN_PRIMARY = createUniqueKey(Confirmtoken.CONFIRMTOKEN, Confirmtoken.CONFIRMTOKEN.ID);
		public static final UniqueKey<ConfirmtokenRecord> KEY_CONFIRMTOKEN_ID_USER_UNIQUE = createUniqueKey(Confirmtoken.CONFIRMTOKEN, Confirmtoken.CONFIRMTOKEN.ID_USER);
		public static final UniqueKey<ResettokenRecord> KEY_RESETTOKEN_PRIMARY = createUniqueKey(Resettoken.RESETTOKEN, Resettoken.RESETTOKEN.ID);
		public static final UniqueKey<ResettokenRecord> KEY_RESETTOKEN_ID_USER_UNIQUE = createUniqueKey(Resettoken.RESETTOKEN, Resettoken.RESETTOKEN.ID_USER);
		public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, User.USER.ID);
		public static final UniqueKey<UserRecord> KEY_USER_EMAIL_UNIQUE = createUniqueKey(User.USER, User.USER.EMAIL);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<BucketRecord, UserRecord> BUCKET_USER = createForeignKey(com.parallax.server.common.cloudsession.db.generated.Keys.KEY_USER_PRIMARY, Bucket.BUCKET, Bucket.BUCKET.ID_USER);
		public static final ForeignKey<ConfirmtokenRecord, UserRecord> RESETTOKEN_USER = createForeignKey(com.parallax.server.common.cloudsession.db.generated.Keys.KEY_USER_PRIMARY, Confirmtoken.CONFIRMTOKEN, Confirmtoken.CONFIRMTOKEN.ID_USER);
		public static final ForeignKey<ResettokenRecord, UserRecord> CONFIRMTOKEN_USER = createForeignKey(com.parallax.server.common.cloudsession.db.generated.Keys.KEY_USER_PRIMARY, Resettoken.RESETTOKEN, Resettoken.RESETTOKEN.ID_USER);
	}
}
