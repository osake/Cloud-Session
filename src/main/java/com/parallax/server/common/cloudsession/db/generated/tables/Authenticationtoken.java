/**
 * This class is generated by jOOQ
 */
package com.parallax.server.common.cloudsession.db.generated.tables;


import com.parallax.server.common.cloudsession.db.generated.Cloudsession;
import com.parallax.server.common.cloudsession.db.generated.Keys;
import com.parallax.server.common.cloudsession.db.generated.tables.records.AuthenticationtokenRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authenticationtoken extends TableImpl<AuthenticationtokenRecord> {

	private static final long serialVersionUID = -2060693359;

	/**
	 * The reference instance of <code>cloudsession.authenticationtoken</code>
	 */
	public static final Authenticationtoken AUTHENTICATIONTOKEN = new Authenticationtoken();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AuthenticationtokenRecord> getRecordType() {
		return AuthenticationtokenRecord.class;
	}

	/**
	 * The column <code>cloudsession.authenticationtoken.id</code>.
	 */
	public final TableField<AuthenticationtokenRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>cloudsession.authenticationtoken.id_user</code>.
	 */
	public final TableField<AuthenticationtokenRecord, Long> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>cloudsession.authenticationtoken.server</code>.
	 */
	public final TableField<AuthenticationtokenRecord, String> SERVER = createField("server", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

	/**
	 * The column <code>cloudsession.authenticationtoken.validity</code>.
	 */
	public final TableField<AuthenticationtokenRecord, Timestamp> VALIDITY = createField("validity", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>cloudsession.authenticationtoken.token</code>.
	 */
	public final TableField<AuthenticationtokenRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>cloudsession.authenticationtoken.browser</code>.
	 */
	public final TableField<AuthenticationtokenRecord, String> BROWSER = createField("browser", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>cloudsession.authenticationtoken.ipaddress</code>.
	 */
	public final TableField<AuthenticationtokenRecord, String> IPADDRESS = createField("ipaddress", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

	/**
	 * Create a <code>cloudsession.authenticationtoken</code> table reference
	 */
	public Authenticationtoken() {
		this("authenticationtoken", null);
	}

	/**
	 * Create an aliased <code>cloudsession.authenticationtoken</code> table reference
	 */
	public Authenticationtoken(String alias) {
		this(alias, AUTHENTICATIONTOKEN);
	}

	private Authenticationtoken(String alias, Table<AuthenticationtokenRecord> aliased) {
		this(alias, aliased, null);
	}

	private Authenticationtoken(String alias, Table<AuthenticationtokenRecord> aliased, Field<?>[] parameters) {
		super(alias, Cloudsession.CLOUDSESSION, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AuthenticationtokenRecord, Long> getIdentity() {
		return Keys.IDENTITY_AUTHENTICATIONTOKEN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AuthenticationtokenRecord> getPrimaryKey() {
		return Keys.KEY_AUTHENTICATIONTOKEN_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AuthenticationtokenRecord>> getKeys() {
		return Arrays.<UniqueKey<AuthenticationtokenRecord>>asList(Keys.KEY_AUTHENTICATIONTOKEN_PRIMARY, Keys.KEY_AUTHENTICATIONTOKEN_TOKEN_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AuthenticationtokenRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AuthenticationtokenRecord, ?>>asList(Keys.AUTHENTICATIONTOKEN_USER);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Authenticationtoken as(String alias) {
		return new Authenticationtoken(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Authenticationtoken rename(String name) {
		return new Authenticationtoken(name, null);
	}
}
