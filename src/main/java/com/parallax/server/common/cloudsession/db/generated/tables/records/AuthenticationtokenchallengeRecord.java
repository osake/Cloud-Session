/**
 * This class is generated by jOOQ
 */
package com.parallax.server.common.cloudsession.db.generated.tables.records;


import com.parallax.server.common.cloudsession.db.generated.tables.Authenticationtokenchallenge;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthenticationtokenchallengeRecord extends UpdatableRecordImpl<AuthenticationtokenchallengeRecord> implements Record5<Long, Long, String, String, Timestamp> {

	private static final long serialVersionUID = -387285395;

	/**
	 * Setter for <code>cloudsession.authenticationtokenchallenge.id</code>.
	 */
	public void setId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>cloudsession.authenticationtokenchallenge.id</code>.
	 */
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>cloudsession.authenticationtokenchallenge.id_authenticationtoken</code>.
	 */
	public void setIdAuthenticationtoken(Long value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>cloudsession.authenticationtokenchallenge.id_authenticationtoken</code>.
	 */
	public Long getIdAuthenticationtoken() {
		return (Long) getValue(1);
	}

	/**
	 * Setter for <code>cloudsession.authenticationtokenchallenge.challenge</code>.
	 */
	public void setChallenge(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>cloudsession.authenticationtokenchallenge.challenge</code>.
	 */
	public String getChallenge() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>cloudsession.authenticationtokenchallenge.hash</code>.
	 */
	public void setHash(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>cloudsession.authenticationtokenchallenge.hash</code>.
	 */
	public String getHash() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>cloudsession.authenticationtokenchallenge.validity</code>.
	 */
	public void setValidity(Timestamp value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>cloudsession.authenticationtokenchallenge.validity</code>.
	 */
	public Timestamp getValidity() {
		return (Timestamp) getValue(4);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record5 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Long, Long, String, String, Timestamp> fieldsRow() {
		return (Row5) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Long, Long, String, String, Timestamp> valuesRow() {
		return (Row5) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Authenticationtokenchallenge.AUTHENTICATIONTOKENCHALLENGE.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field2() {
		return Authenticationtokenchallenge.AUTHENTICATIONTOKENCHALLENGE.ID_AUTHENTICATIONTOKEN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Authenticationtokenchallenge.AUTHENTICATIONTOKENCHALLENGE.CHALLENGE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Authenticationtokenchallenge.AUTHENTICATIONTOKENCHALLENGE.HASH;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field5() {
		return Authenticationtokenchallenge.AUTHENTICATIONTOKENCHALLENGE.VALIDITY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value2() {
		return getIdAuthenticationtoken();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getChallenge();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getHash();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value5() {
		return getValidity();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthenticationtokenchallengeRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthenticationtokenchallengeRecord value2(Long value) {
		setIdAuthenticationtoken(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthenticationtokenchallengeRecord value3(String value) {
		setChallenge(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthenticationtokenchallengeRecord value4(String value) {
		setHash(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthenticationtokenchallengeRecord value5(Timestamp value) {
		setValidity(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthenticationtokenchallengeRecord values(Long value1, Long value2, String value3, String value4, Timestamp value5) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached AuthenticationtokenchallengeRecord
	 */
	public AuthenticationtokenchallengeRecord() {
		super(Authenticationtokenchallenge.AUTHENTICATIONTOKENCHALLENGE);
	}

	/**
	 * Create a detached, initialised AuthenticationtokenchallengeRecord
	 */
	public AuthenticationtokenchallengeRecord(Long id, Long idAuthenticationtoken, String challenge, String hash, Timestamp validity) {
		super(Authenticationtokenchallenge.AUTHENTICATIONTOKENCHALLENGE);

		setValue(0, id);
		setValue(1, idAuthenticationtoken);
		setValue(2, challenge);
		setValue(3, hash);
		setValue(4, validity);
	}
}
